// <auto-generated />
using API.Domains.Books.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(BookInfoContext))]
    [Migration("20250313090921_InitialMigrationWithNewData")]
    partial class InitialMigrationWithNewData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("API.Domains.Books.Domain.Author", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "George Orwell"
                        },
                        new
                        {
                            Id = "2",
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            Id = "3",
                            Name = "J.R.R. Tolkien"
                        });
                });

            modelBuilder.Entity("API.Domains.Books.Domain.Book", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Title = "1984"
                        },
                        new
                        {
                            Id = "2",
                            Title = "Animal Farm"
                        },
                        new
                        {
                            Id = "3",
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = "4",
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = "5",
                            Title = "The Hobbit"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<string>("AuthorsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BooksId")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorsId = "1",
                            BooksId = "1"
                        },
                        new
                        {
                            AuthorsId = "1",
                            BooksId = "2"
                        },
                        new
                        {
                            AuthorsId = "2",
                            BooksId = "3"
                        },
                        new
                        {
                            AuthorsId = "3",
                            BooksId = "4"
                        },
                        new
                        {
                            AuthorsId = "3",
                            BooksId = "5"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("API.Domains.Books.Domain.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domains.Books.Domain.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
